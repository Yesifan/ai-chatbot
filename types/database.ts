import { type Message as AIMessage } from 'ai'
import { Generated, Insertable, Selectable, Updateable } from 'kysely'
import { AssistantType, GPT_Model, Role } from '../lib/constants'

export interface Database {
  user: UserTable
  robot: RobotTable
  chat: ChatTable
  message: MessageTable
  thread: ThreadTable
}

export interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<string>
  accessToken: string
  lastLogin?: Date
}

// 设置 chatgpt 模型参数
export interface RobotTable {
  id: string
  userId: string
  name: string
  icon?: string
  cover?: string
  model?: GPT_Model
  createdAt?: Date
  description?: string
  pinPrompt?: string
  // chat gpt 参数
  maxToken?: number
  temperature?: number
  topP?: number
  presencePenalty?: number
  frequencyPenalty?: number
  // How many chat completion choices to generate for each input message.
  attachedMessagesCount?: number
  // {{input}}
  input_template?: string
}

export interface ChatTable
  extends Omit<RobotTable, 'id' | 'name' | 'icon' | 'cover' | 'description'> {
  id: string
  userId: string
  robotId?: string
  title: string
  createdAt: Date
  lastMessage?: string
  lastMessageAt?: Date
  isSaved?: boolean
  isFavourite?: boolean
}

export interface MessageTable extends AIMessage {
  id: string
  chatId: string
  model?: GPT_Model
  role: Role
  isPin?: Generated<boolean>
  isFavourite?: Generated<boolean>
  createdAt: Date
}

export interface ThreadTable {
  id: string
  runId: string
  userId: string
  messageId?: string
  type: AssistantType
  status:
    | 'queued'
    | 'in_progress'
    | 'requires_action'
    | 'cancelling'
    | 'cancelled'
    | 'failed'
    | 'completed'
    | 'expired'
  createdAt: Date
  lastProcessAt?: Date
}

export type User = Selectable<UserTable>

export type Robot = Selectable<RobotTable>
export type NewRobot = Insertable<RobotTable>
export type PutRobot = Updateable<RobotTable>

export type Chat = Selectable<ChatTable>
export type NewChat = Insertable<ChatTable>
export type PutChat = Updateable<ChatTable>

export type Message = Partial<Selectable<MessageTable>> & {
  id: string
  role: Role
  content: string
}
export type NewMessage = Insertable<MessageTable>
export type PutMessage = Updateable<MessageTable>

export type Thread = Selectable<ThreadTable>
export type NewThread = Insertable<ThreadTable>
export type PutThread = Updateable<ThreadTable>

export type ServerActionResult<
  R = {
    ok: true
  }
> =
  | R
  | {
      ok: false
      error: string
      message?: string
    }
