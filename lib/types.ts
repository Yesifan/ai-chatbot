import { type Message as AiMessage } from 'ai'
import {
  ColumnType,
  Generated,
  Insertable,
  Selectable,
  Updateable
} from 'kysely'

export const enum GPT_MODEL {
  GPT_4 = 'gpt-4',
  GPT_4_0314 = 'gpt-4-0314',
  GPT_4_0613 = 'gpt-4-0613',
  GPT_4_32K = 'gpt-4-32k',
  GPT_4_32K_0314 = 'gpt-4-32k-0314',
  GPT_4_32K_0613 = 'gpt-4-32k-0613',
  GPT_3_5_TURBO = 'gpt-3.5-turbo',
  GPT_3_5_TURBO_0301 = 'gpt-3.5-turbo-0301',
  GPT_3_5_TURBO_0613 = 'gpt-3.5-turbo-0613',
  GPT_3_5_TURBO_16K = 'gpt-3.5-turbo-16k',
  GPT_3_5_TURBO_16K_0613 = 'gpt-3.5-turbo-16k-0613'
}

export interface Database {
  user: UserTable
  robot: RobotTable
  chat: ChatTable
  message: MessageTable
}

export interface UserTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<string>
  accessToken: string
  lastLogin?: Date
}

// 设置 chatgpt 模型参数
export interface RobotTable {
  id: Generated<string>
  userId: string
  name: string
  model: GPT_MODEL
  // json string
  pinPrompt?: string
  maxToken: number
  temperature?: number
  topP?: number
  frequencyPenalty?: number
  presencePenalty?: number
  // {{input}}
  input_template?: string
  attachedMessagesCount: number
}

export interface ChatTable extends Omit<RobotTable, 'id' | 'name'> {
  id: string
  robotId: string
  title: string
  createdAt: Date
  userId: string
  sharePath?: string
}

export interface MessageTable extends AiMessage {
  isPin: boolean
  isFavourite: boolean
  chatId: string
}

export type User = Selectable<UserTable>

export type Robot = Selectable<RobotTable>
export type NewRobot = Insertable<RobotTable>
export type PutRobot = Updateable<RobotTable>

export type Chat = Selectable<ChatTable>
export type NewChat = Insertable<ChatTable>
export type PutChat = Updateable<ChatTable>

export type Message = Selectable<MessageTable>
export type NewMessage = Insertable<MessageTable>
export type PutMessage = Updateable<MessageTable>

export type ServerActionResult<Result> = Promise<
  | Result
  | {
      error: string
    }
>
